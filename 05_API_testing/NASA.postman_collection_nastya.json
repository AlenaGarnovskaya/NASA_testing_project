{
	"info": {
		"_postman_id": "987a2be0-8dfe-485b-917d-c357a3f27f54",
		"name": "NASA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34512937"
	},
	"item": [
		{
			"name": "Nasa Image and Video Library",
			"item": [
				{
					"name": "Images",
					"item": [
						{
							"name": "Moon landing image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Validate status code (is 200)\r",
											"switch (pm.response.code) {\r",
											"    case 200:\r",
											"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(200);\r",
											"        });\r",
											"        break;\r",
											"    case 404:\r",
											"        pm.test(\"404 Not Found\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(404);\r",
											"        });\r",
											"        break;\r",
											"    case 400:\r",
											"        pm.test(\"400 Bad Request\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(400);\r",
											"        });\r",
											"        break;\r",
											"    case 401:\r",
											"        pm.test(\"401 Unauthorized\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(401);\r",
											"        });\r",
											"        break;\r",
											"    case 500:\r",
											"        pm.test(\"500 Internal Server Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(500);\r",
											"        });\r",
											"        break;\r",
											"    case 503:\r",
											"        pm.test(\"503 Server Unavailable\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(503);\r",
											"        });\r",
											"        break;\r",
											"    case 502:\r",
											"        pm.test(\"502 Bad Gateway\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(502);\r",
											"        });\r",
											"        break;\r",
											"    case 599:\r",
											"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(599);\r",
											"        });\r",
											"        break;\r",
											"    case 408:\r",
											"        pm.test(\"408 Request Timeout\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(408);\r",
											"        });\r",
											"        break;\r",
											"    default:\r",
											"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
											"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
											"        });\r",
											"}\r",
											"\r",
											"// Test 2: Validate response time (is below 800)\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"// Test 3: Verify the header \"Content-Type\" is correct\r",
											"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test 4: Verify the response can be processed\r",
											"pm.test(\"Response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Test 5: Verify that the \"total_hits\" value in the response is correct\r",
											"pm.test(\"Total hits value is correct\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.collection.metadata.total_hits).to.be.a('number').and.to.equal(0);\r",
											"\r",
											"});\r",
											"// Test 6: Verify that the response contains all the required fields\r",
											"pm.test(\"Response contains all required fields\", function () {\r",
											"    const responseData = pm.response.json().collection;\r",
											"    pm.expect(responseData).to.have.property('version');\r",
											"    pm.expect(responseData).to.have.property('href');\r",
											"    pm.expect(responseData).to.have.property('items');\r",
											"    pm.expect(responseData).to.have.property('metadata');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://images-api.nasa.gov/search\n?q=apollo%2011\n&description=moon%20landing\n&media_type=image\" |\npython -m json.tool\n",
									"protocol": "https",
									"host": [
										"images-api",
										"nasa",
										"gov"
									],
									"path": [
										"search\n"
									],
									"query": [
										{
											"key": "q",
											"value": "apollo%2011\n"
										},
										{
											"key": "description",
											"value": "moon%20landing\n"
										},
										{
											"key": "media_type",
											"value": "image\" |\npython -m json.tool\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Andromeda image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Validate status code (is 200)\r",
											"switch (pm.response.code) {\r",
											"    case 200:\r",
											"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(200);\r",
											"        });\r",
											"        break;\r",
											"    case 404:\r",
											"        pm.test(\"404 Not Found\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(404);\r",
											"        });\r",
											"        break;\r",
											"    case 400:\r",
											"        pm.test(\"400 Bad Request\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(400);\r",
											"        });\r",
											"        break;\r",
											"    case 401:\r",
											"        pm.test(\"401 Unauthorized\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(401);\r",
											"        });\r",
											"        break;\r",
											"    case 500:\r",
											"        pm.test(\"500 Internal Server Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(500);\r",
											"        });\r",
											"        break;\r",
											"    case 503:\r",
											"        pm.test(\"503 Server Unavailable\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(503);\r",
											"        });\r",
											"        break;\r",
											"    case 502:\r",
											"        pm.test(\"502 Bad Gateway\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(502);\r",
											"        });\r",
											"        break;\r",
											"    case 599:\r",
											"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(599);\r",
											"        });\r",
											"        break;\r",
											"    case 408:\r",
											"        pm.test(\"408 Request Timeout\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(408);\r",
											"        });\r",
											"        break;\r",
											"    default:\r",
											"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
											"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
											"        });\r",
											"}\r",
											"\r",
											"// Test 2: Validate response time (is below 800)\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"// Test 3: Verify the header \"Content-Type\" is correct\r",
											"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test 4: Verify the response can be processed\r",
											"pm.test(\"Response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Test 5: Verify that the \"total_hits\" value in the response is correct\r",
											"pm.test(\"Total hits value is correct\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.collection.metadata.total_hits).to.be.a('number').and.to.equal(0);\r",
											"\r",
											"});\r",
											"// Test 6: Verify that the response contains all the required fields\r",
											"pm.test(\"Response contains all required fields\", function () {\r",
											"    const responseData = pm.response.json().collection;\r",
											"    pm.expect(responseData).to.have.property('version');\r",
											"    pm.expect(responseData).to.have.property('href');\r",
											"    pm.expect(responseData).to.have.property('items');\r",
											"    pm.expect(responseData).to.have.property('metadata');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://images-api.nasa.gov/search\n?q=andromeda%2011\n&description=\n&media_type=image\" |\npython -m json.tool\n",
									"protocol": "https",
									"host": [
										"images-api",
										"nasa",
										"gov"
									],
									"path": [
										"search\n"
									],
									"query": [
										{
											"key": "q",
											"value": "andromeda%2011\n"
										},
										{
											"key": "description",
											"value": "\n"
										},
										{
											"key": "media_type",
											"value": "image\" |\npython -m json.tool\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Moon image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Validate status code (is 200)\r",
											"switch (pm.response.code) {\r",
											"    case 200:\r",
											"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(200);\r",
											"        });\r",
											"        break;\r",
											"    case 404:\r",
											"        pm.test(\"404 Not Found\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(404);\r",
											"        });\r",
											"        break;\r",
											"    case 400:\r",
											"        pm.test(\"400 Bad Request\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(400);\r",
											"        });\r",
											"        break;\r",
											"    case 401:\r",
											"        pm.test(\"401 Unauthorized\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(401);\r",
											"        });\r",
											"        break;\r",
											"    case 500:\r",
											"        pm.test(\"500 Internal Server Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(500);\r",
											"        });\r",
											"        break;\r",
											"    case 503:\r",
											"        pm.test(\"503 Server Unavailable\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(503);\r",
											"        });\r",
											"        break;\r",
											"    case 502:\r",
											"        pm.test(\"502 Bad Gateway\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(502);\r",
											"        });\r",
											"        break;\r",
											"    case 599:\r",
											"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(599);\r",
											"        });\r",
											"        break;\r",
											"    case 408:\r",
											"        pm.test(\"408 Request Timeout\", function () {\r",
											"            pm.expect(pm.response.code).to.equal(408);\r",
											"        });\r",
											"        break;\r",
											"    default:\r",
											"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
											"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
											"        });\r",
											"}\r",
											"\r",
											"// Test 2: Validate response time (is below 800)\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"// Test 3: Verify the header \"Content-Type\" is correct\r",
											"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test 4: Verify the response can be processed\r",
											"pm.test(\"Response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"});\r",
											"\r",
											"// Test 5: Verify that the \"total_hits\" value in the response is correct\r",
											"pm.test(\"Total hits value is correct\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.collection.metadata.total_hits).to.be.a('number').and.to.equal(0);\r",
											"\r",
											"});\r",
											"// Test 6: Verify that the response contains all the required fields\r",
											"pm.test(\"Response contains all required fields\", function () {\r",
											"    const responseData = pm.response.json().collection;\r",
											"    pm.expect(responseData).to.have.property('version');\r",
											"    pm.expect(responseData).to.have.property('href');\r",
											"    pm.expect(responseData).to.have.property('items');\r",
											"    pm.expect(responseData).to.have.property('metadata');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://images-api.nasa.gov/search\n?q=moon%1995\n&description=\n&media_type=image\" |\npython -m json.tool\n",
									"protocol": "https",
									"host": [
										"images-api",
										"nasa",
										"gov"
									],
									"path": [
										"search\n"
									],
									"query": [
										{
											"key": "q",
											"value": "moon%1995\n"
										},
										{
											"key": "description",
											"value": "\n"
										},
										{
											"key": "media_type",
											"value": "image\" |\npython -m json.tool\n"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Validate status code (is 200)\r",
									"switch (pm.response.code) {\r",
									"    case 200:\r",
									"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(200);\r",
									"        });\r",
									"        break;\r",
									"    case 404:\r",
									"        pm.test(\"404 Not Found\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(404);\r",
									"        });\r",
									"        break;\r",
									"    case 400:\r",
									"        pm.test(\"400 Bad Request\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(400);\r",
									"        });\r",
									"        break;\r",
									"    case 401:\r",
									"        pm.test(\"401 Unauthorized\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(401);\r",
									"        });\r",
									"        break;\r",
									"    case 500:\r",
									"        pm.test(\"500 Internal Server Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(500);\r",
									"        });\r",
									"        break;\r",
									"    case 503:\r",
									"        pm.test(\"503 Server Unavailable\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(503);\r",
									"        });\r",
									"        break;\r",
									"    case 502:\r",
									"        pm.test(\"502 Bad Gateway\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(502);\r",
									"        });\r",
									"        break;\r",
									"    case 599:\r",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(599);\r",
									"        });\r",
									"        break;\r",
									"    case 408:\r",
									"        pm.test(\"408 Request Timeout\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(408);\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
									"        });\r",
									"}\r",
									"\r",
									"// Test 2: Validate response time (is below 800)\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Test 3: Verify the header \"Content-Type\" is correct\r",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 4: Verify the response can be processed\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://images-api.nasa.gov/search\n?q=apollo%2011\n",
							"protocol": "https",
							"host": [
								"images-api",
								"nasa",
								"gov"
							],
							"path": [
								"search\n"
							],
							"query": [
								{
									"key": "q",
									"value": "apollo%2011\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Validate status code (is 200)\r",
									"switch (pm.response.code) {\r",
									"    case 200:\r",
									"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(200);\r",
									"        });\r",
									"        break;\r",
									"    case 404:\r",
									"        pm.test(\"404 Not Found\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(404);\r",
									"        });\r",
									"        break;\r",
									"    case 400:\r",
									"        pm.test(\"400 Bad Request\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(400);\r",
									"        });\r",
									"        break;\r",
									"    case 401:\r",
									"        pm.test(\"401 Unauthorized\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(401);\r",
									"        });\r",
									"        break;\r",
									"    case 500:\r",
									"        pm.test(\"500 Internal Server Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(500);\r",
									"        });\r",
									"        break;\r",
									"    case 503:\r",
									"        pm.test(\"503 Server Unavailable\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(503);\r",
									"        });\r",
									"        break;\r",
									"    case 502:\r",
									"        pm.test(\"502 Bad Gateway\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(502);\r",
									"        });\r",
									"        break;\r",
									"    case 599:\r",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(599);\r",
									"        });\r",
									"        break;\r",
									"    case 408:\r",
									"        pm.test(\"408 Request Timeout\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(408);\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
									"        });\r",
									"}\r",
									"\r",
									"// Test 2: Validate response time (is below 800)\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Test 3: Verify the header \"Content-Type\" is correct\r",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 4: Verify the response can be processed\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://images-api.nasa.gov/asset/as11-40-5874?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"images-api",
								"nasa",
								"gov"
							],
							"path": [
								"asset",
								"as11-40-5874"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Validate status code (is 200)\r",
									"switch (pm.response.code) {\r",
									"    case 200:\r",
									"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(200);\r",
									"        });\r",
									"        break;\r",
									"    case 404:\r",
									"        pm.test(\"404 Not Found\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(404);\r",
									"        });\r",
									"        break;\r",
									"    case 400:\r",
									"        pm.test(\"400 Bad Request\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(400);\r",
									"        });\r",
									"        break;\r",
									"    case 401:\r",
									"        pm.test(\"401 Unauthorized\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(401);\r",
									"        });\r",
									"        break;\r",
									"    case 500:\r",
									"        pm.test(\"500 Internal Server Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(500);\r",
									"        });\r",
									"        break;\r",
									"    case 503:\r",
									"        pm.test(\"503 Server Unavailable\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(503);\r",
									"        });\r",
									"        break;\r",
									"    case 502:\r",
									"        pm.test(\"502 Bad Gateway\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(502);\r",
									"        });\r",
									"        break;\r",
									"    case 599:\r",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(599);\r",
									"        });\r",
									"        break;\r",
									"    case 408:\r",
									"        pm.test(\"408 Request Timeout\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(408);\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
									"        });\r",
									"}\r",
									"\r",
									"// Test 2: Validate response time (is below 800)\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Test 3: Verify the header \"Content-Type\" is correct\r",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 4: Verify the response can be processed\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://images-api.nasa.gov/metadata/as11-40-5874?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"images-api",
								"nasa",
								"gov"
							],
							"path": [
								"metadata",
								"as11-40-5874"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Techtransfer",
			"item": [
				{
					"name": "Techtransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Validate status code (is 200)\r",
									"switch (pm.response.code) {\r",
									"    case 200:\r",
									"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(200);\r",
									"        });\r",
									"        break;\r",
									"    case 404:\r",
									"        pm.test(\"404 Not Found\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(404);\r",
									"        });\r",
									"        break;\r",
									"    case 400:\r",
									"        pm.test(\"400 Bad Request\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(400);\r",
									"        });\r",
									"        break;\r",
									"    case 401:\r",
									"        pm.test(\"401 Unauthorized\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(401);\r",
									"        });\r",
									"        break;\r",
									"    case 500:\r",
									"        pm.test(\"500 Internal Server Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(500);\r",
									"        });\r",
									"        break;\r",
									"    case 503:\r",
									"        pm.test(\"503 Server Unavailable\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(503);\r",
									"        });\r",
									"        break;\r",
									"    case 502:\r",
									"        pm.test(\"502 Bad Gateway\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(502);\r",
									"        });\r",
									"        break;\r",
									"    case 599:\r",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(599);\r",
									"        });\r",
									"        break;\r",
									"    case 408:\r",
									"        pm.test(\"408 Request Timeout\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(408);\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
									"        });\r",
									"}\r",
									"\r",
									"// Test 2: Validate response time (is below 800)\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Test 3: verify the response has all the required \r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.results).to.exist;\r",
									"  pm.expect(responseData.count).to.exist;\r",
									"  pm.expect(responseData.total).to.exist;\r",
									"  pm.expect(responseData.perpage).to.exist;\r",
									"  pm.expect(responseData.page).to.exist;\r",
									"});\r",
									"\r",
									"// Test 4: Verify results are in an array and is not empty \r",
									"pm.test(\"Results is an array and is not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 5: Verify the header \"Content-Type\" is correct\r",
									"pm.test(\"Presence of specific header Content-Type in the response\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", 'application/json');\r",
									"});\r",
									"\r",
									"// Test 6: Verify the values in response are correct\r",
									"pm.test(\"The values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(16);\r",
									"    pm.expect(jsonData.total).to.eql(16);\r",
									"    pm.expect(jsonData.perpage).to.eql(10);\r",
									"    pm.expect(jsonData.page).to.eql(0);\r",
									"});\r",
									"\r",
									"// Test 7: Verify the response can be processed\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.nasa.gov/techtransfer/patent/?engine&api_key=DEMO_KEY&Spinoff=None&software=None&patent_issued=None&patent=None",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"techtransfer",
								"patent",
								""
							],
							"query": [
								{
									"key": "engine",
									"value": null
								},
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								},
								{
									"key": "Spinoff",
									"value": "None",
									"description": "Returns spinoff examples that match given word."
								},
								{
									"key": "software",
									"value": "None",
									"description": "Returns JSON of NASA software that matches given string."
								},
								{
									"key": "patent_issued",
									"value": "None",
									"description": "Returns patent results in a JSON that match the string within the information about how issued each patent"
								},
								{
									"key": "patent",
									"value": "None",
									"description": "Return a JSON of patents that match the string provided"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mars Rover Photos",
			"item": [
				{
					"name": "Mars Rover Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Photos array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('photos').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"All img_src URLs lead to images\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const photos = responseData.photos;\r",
									"\r",
									"    photos.forEach((photo) => {\r",
									"        pm.expect(photo.img_src).to.match(/^https?:\\/\\/.+\\.(png|jpg|jpeg|gif)$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Check if each camera has a name and full name\r",
									"pm.test(\"Each camera has a name and full name\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const cameras = responseData.photos[0].rover.cameras;\r",
									"\r",
									"    cameras.forEach((camera) => {\r",
									"        pm.expect(camera).to.have.property('name').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(camera).to.have.property('full_name').that.is.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Camera Name</th>\r",
									"        <th>Launch Date</th>\r",
									"        <th>Landing Date</th>\r",
									"        <th>Time Difference</th>\r",
									"        <th>Total Photos / Sol</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response.photos}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{camera.name}}</td>\r",
									"            <td>{{rover.launch_date}}</td>\r",
									"            <td>{{rover.landing_date}}</td>\r",
									"            <td>{{rover.timeDifference}}</td>\r",
									"            <td>{{totalPhotosDividedBySol}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function timeDifference(launchDate, landingDate) {\r",
									"    var launch = new Date(launchDate);\r",
									"    var landing = new Date(landingDate);\r",
									"    var diff = Math.abs(launch - landing);\r",
									"    var days = Math.ceil(diff / (1000 * 60 * 60 * 24));\r",
									"    return days;\r",
									"}\r",
									"\r",
									"function totalPhotosDividedBySol(totalPhotos, sol) {\r",
									"    var result = totalPhotos / sol;\r",
									"    return result.toFixed(2);\r",
									"}\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var visualizerData = pm.response.json();\r",
									"    \r",
									"    visualizerData.photos.forEach(((photo,index)=>{\r",
									"      visualizerData.photos[index] = {\r",
									"            ...visualizerData.photos[index],\r",
									"            rover:{\r",
									"                ...visualizerData.photos[index].rover,\r",
									"                timeDifference:timeDifference(photo.rover.launch_date,photo.rover.landing_date),\r",
									"            },\r",
									"            totalPhotosDividedBySol:totalPhotosDividedBySol(photo.rover.total_photos, photo.sol)\r",
									"        }\r",
									"    }));\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&page=2&api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"mars-photos",
								"api",
								"v1",
								"rovers",
								"curiosity",
								"photos"
							],
							"query": [
								{
									"key": "sol",
									"value": "1000"
								},
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								},
								{
									"key": "start_date",
									"value": "2022-01-01\n  ",
									"disabled": true
								},
								{
									"key": "end_date",
									"value": "2022-01-31",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response contains an image\r",
									"pm.test(\"Response contains an image\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify the response time is less than 1000ms\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Test 4: Verify the response size is less than 400KB\r",
									"pm.test(\"Response size is less than 400KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(250000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://mars.jpl.nasa.gov/msl-raw-images/msss/01000/mcam/1000MR0044631190503679E04_DXXX.jpg",
							"protocol": "http",
							"host": [
								"mars",
								"jpl",
								"nasa",
								"gov"
							],
							"path": [
								"msl-raw-images",
								"msss",
								"01000",
								"mcam",
								"1000MR0044631190503679E04_DXXX.jpg"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EONET",
			"item": [
				{
					"name": "EONET Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status code is 200\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Check if the response time is less than 1000ms\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Test 3: Check if the response has title, description, link, and categories\r",
									"pm.test(\"Response has title, description, link, and categories\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    pm.expect(response).to.have.property('title');\r",
									"    pm.expect(response).to.have.property('description');\r",
									"    pm.expect(response).to.have.property('link');\r",
									"    pm.expect(response).to.have.property('categories');\r",
									"});\r",
									"\r",
									"// Test 4: Check if each category has id, title, link, and description fields\r",
									"pm.test(\"Each category should have id, title, link, and description fields\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    pm.expect(response).to.have.property('categories').that.is.an('array');\r",
									"\r",
									"    response.categories.forEach(function(category) {\r",
									"        pm.expect(category).to.have.property('id');\r",
									"        pm.expect(category).to.have.property('title');\r",
									"        pm.expect(category).to.have.property('link');\r",
									"        pm.expect(category).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Check if the response contains the Content-Type header\r",
									"pm.test(\"Response has Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// Test 6: Check each category has a link in the body response\r",
									"pm.test(\"Each category should have a link in the body response\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.categories.forEach(function(category) {\r",
									"        pm.expect(category.link).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 7: Check if each category has a non-empty description\r",
									"pm.test(\"Each category should have a non-empty description\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.categories.forEach(function(category) {\r",
									"        pm.expect(category.description).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://eonet.gsfc.nasa.gov/api/v2.1/categories?=7&source=InciWeb&status=open&limit=17&days=12",
							"protocol": "https",
							"host": [
								"eonet",
								"gsfc",
								"nasa",
								"gov"
							],
							"path": [
								"api",
								"v2.1",
								"categories"
							],
							"query": [
								{
									"key": null,
									"value": "7"
								},
								{
									"key": "source",
									"value": "InciWeb"
								},
								{
									"key": "status",
									"value": "open"
								},
								{
									"key": "limit",
									"value": "17"
								},
								{
									"key": "days",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EONET Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Check if the response time is less than 1000ms",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Test 3: Check if the response contains the Content-Type header",
									"pm.test(\"Response has Content-Type header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"// Test 4: Check if the response has the required fields",
									"pm.test(\"Response has the required fields - title, description, link, events\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.title).to.not.be.empty;",
									"    pm.expect(responseData.description).to.not.be.empty;",
									"    pm.expect(responseData.link).to.not.be.empty;",
									"    pm.expect(responseData.events).to.be.an('array').that.is.not.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://eonet.gsfc.nasa.gov/api/v2.1/events?source=InciWeb&status=open&limit=16&days=272",
							"protocol": "https",
							"host": [
								"eonet",
								"gsfc",
								"nasa",
								"gov"
							],
							"path": [
								"api",
								"v2.1",
								"events"
							],
							"query": [
								{
									"key": "source",
									"value": "InciWeb"
								},
								{
									"key": "status",
									"value": "open"
								},
								{
									"key": "limit",
									"value": "16"
								},
								{
									"key": "days",
									"value": "272"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EONET Layers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Check if the response time is less than 1000ms\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Test 3: Check if the response contains the Content-Type header\r",
									"pm.test(\"Content-Type header is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/rss+xml; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Test 4: Check if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test 5: Check if the response body is an object\r",
									"pm.test(\"Response body is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Test 6: Check if the response body contains all the properties\r",
									"pm.test(\"Response body contains all the properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"title\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"description\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"link\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"categories\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains an array of length 3\", function () {\r",
									"    pm.expect(pm.response.json().title).to.be.an(\"string\").that.is.not.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a(\"string\").that.is.not.empty;\r",
									"    pm.expect(pm.response.json().link).to.be.a(\"string\").that.is.not.empty;\r",
									"    pm.expect(pm.response.json().categories).to.be.an(\"array\").that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://eonet.gsfc.nasa.gov/api/v2.1/layers?=5",
							"protocol": "https",
							"host": [
								"eonet",
								"gsfc",
								"nasa",
								"gov"
							],
							"path": [
								"api",
								"v2.1",
								"layers"
							],
							"query": [
								{
									"key": null,
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Satellite Situation Center",
			"item": [
				{
					"name": "SPASE Observatories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status code is 200",
									"switch (pm.response.code) {",
									"    case 200:",
									"        pm.test(\"200 OK. The request has succeeded\", function () {",
									"            pm.expect(pm.response.code).to.equal(200);",
									"        });",
									"        break;",
									"    case 404:",
									"        pm.test(\"404 Not Found\", function () {",
									"            pm.expect(pm.response.code).to.equal(404);",
									"        });",
									"        break;",
									"    case 400:",
									"        pm.test(\"400 Bad Request\", function () {",
									"            pm.expect(pm.response.code).to.equal(400);",
									"        });",
									"        break;",
									"    case 401:",
									"        pm.test(\"401 Unauthorized\", function () {",
									"            pm.expect(pm.response.code).to.equal(401);",
									"        });",
									"        break;",
									"    case 500:",
									"        pm.test(\"500 Internal Server Error\", function () {",
									"            pm.expect(pm.response.code).to.equal(500);",
									"        });",
									"        break;",
									"    case 503:",
									"        pm.test(\"503 Server Unavailable\", function () {",
									"            pm.expect(pm.response.code).to.equal(503);",
									"        });",
									"        break;",
									"    case 502:",
									"        pm.test(\"502 Bad Gateway\", function () {",
									"            pm.expect(pm.response.code).to.equal(502);",
									"        });",
									"        break;",
									"    case 599:",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {",
									"            pm.expect(pm.response.code).to.equal(599);",
									"        });",
									"        break;",
									"    case 408:",
									"        pm.test(\"408 Request Timeout\", function () {",
									"            pm.expect(pm.response.code).to.equal(408);",
									"        });",
									"        break;",
									"    default:",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);",
									"        });",
									"}",
									"",
									"",
									"// Test 2: Check if the response is in JSON format",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Check if the response size is less than 10KB",
									"pm.test(\"Response size is less than 10KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(100240);",
									"});",
									"",
									"",
									"// Test 4: Check if the response is okay to process",
									"pm.test(\"Response should be okay to process\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.an(\"object\");",
									"});",
									"",
									"// Test 5: Check if body matches string",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"Name\");",
									"    pm.expect(pm.response.text()).to.include(\"Resolution\");",
									"    pm.expect(pm.response.text()).to.include(\"StartTime\");",
									"    pm.expect(pm.response.text()).to.include(\"EndTime\");",
									"    pm.expect(pm.response.text()).to.include(\"ResourceId\");",
									"});",
									"",
									"// Test 6: Check if the header is correct",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json\");",
									"    pm.response.to.have.header(\"server\", \"Apache\");",
									"});",
									"",
									"// Test 7: Check if the Observatory is in response",
									"pm.test(\"Observatory is in response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Observatory\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "VrCLYfkJCXAR7Pnw0rYbbC8ffPDPwSOzeok4dTzE",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/observatories",
							"protocol": "https",
							"host": [
								"sscweb",
								"gsfc",
								"nasa",
								"gov"
							],
							"path": [
								"WS",
								"sscr",
								"2",
								"observatories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ground Stations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status code is 200",
									"switch (pm.response.code) {",
									"    case 200:",
									"        pm.test(\"200 OK. The request has succeeded\", function () {",
									"            pm.expect(pm.response.code).to.equal(200);",
									"        });",
									"        break;",
									"    case 404:",
									"        pm.test(\"404 Not Found\", function () {",
									"            pm.expect(pm.response.code).to.equal(404);",
									"        });",
									"        break;",
									"    case 400:",
									"        pm.test(\"400 Bad Request\", function () {",
									"            pm.expect(pm.response.code).to.equal(400);",
									"        });",
									"        break;",
									"    case 401:",
									"        pm.test(\"401 Unauthorized\", function () {",
									"            pm.expect(pm.response.code).to.equal(401);",
									"        });",
									"        break;",
									"    case 500:",
									"        pm.test(\"500 Internal Server Error\", function () {",
									"            pm.expect(pm.response.code).to.equal(500);",
									"        });",
									"        break;",
									"    case 503:",
									"        pm.test(\"503 Server Unavailable\", function () {",
									"            pm.expect(pm.response.code).to.equal(503);",
									"        });",
									"        break;",
									"    case 502:",
									"        pm.test(\"502 Bad Gateway\", function () {",
									"            pm.expect(pm.response.code).to.equal(502);",
									"        });",
									"        break;",
									"    case 599:",
									"        pm.test(\"599 Network Connect Timeout Error\", function () {",
									"            pm.expect(pm.response.code).to.equal(599);",
									"        });",
									"        break;",
									"    case 408:",
									"        pm.test(\"408 Request Timeout\", function () {",
									"            pm.expect(pm.response.code).to.equal(408);",
									"        });",
									"        break;",
									"    default:",
									"        pm.test(\"Unknown response code: \" + pm.response.code, function () {",
									"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);",
									"        });",
									"}",
									"",
									"",
									"// Test 2: Check if the response is in JSON format",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Check if the response size is less than 10KB",
									"pm.test(\"Response size is less than 10KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(100240);",
									"});",
									"",
									"",
									"// Test 4: Check if the response is okay to process",
									"pm.test(\"Response should be okay to process\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.an(\"object\");",
									"});",
									"",
									"// Test 5: Check if body matches string",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"Name\");",
									"    pm.expect(pm.response.text()).to.include(\"Location\");",
									"});",
									"",
									"// Test 6: Check if the header is correct",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json\");",
									"    pm.response.to.have.header(\"server\", \"Apache\");",
									"});",
									"",
									"// Test 7: Check if the GroundStation is in response",
									"pm.test(\"GroundStation is in response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"GroundStation\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "VrCLYfkJCXAR7Pnw0rYbbC8ffPDPwSOzeok4dTzE",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/groundStations",
							"protocol": "https",
							"host": [
								"sscweb",
								"gsfc",
								"nasa",
								"gov"
							],
							"path": [
								"WS",
								"sscr",
								"2",
								"groundStations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TLE",
			"item": [
				{
					"name": "TLE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Validate status code (should be 200)\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Check if response is in JSON format\r",
									"\r",
									"    pm.test(\"Response is valid JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test 3: Check if the response timeis less than 600s\r",
									"pm.test(\"Response time is less than 600s\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"// Test 4: Check for specific content in the response body\r",
									"pm.test(\"Check for specific content in the response body\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    \r",
									"    // Check for the presence of specific properties\r",
									"    pm.expect(responseJSON).to.have.property('@context');\r",
									"    pm.expect(responseJSON).to.have.property('@id');\r",
									"    pm.expect(responseJSON).to.have.property('@type');\r",
									"    pm.expect(responseJSON).to.have.property('totalItems');\r",
									"    pm.expect(responseJSON).to.have.property('member');\r",
									"    pm.expect(responseJSON).to.have.property('parameters');\r",
									"    pm.expect(responseJSON).to.have.property('view');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://tle.ivanstanojevic.me/api/tle?GET /api/tle?search%3D{q}&GET /api/tle/{q}",
							"protocol": "http",
							"host": [
								"tle",
								"ivanstanojevic",
								"me"
							],
							"path": [
								"api",
								"tle"
							],
							"query": [
								{
									"key": "GET /api/tle?search%3D{q}",
									"value": null
								},
								{
									"key": "GET /api/tle/{q}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "VrCLYfkJCXAR7Pnw0rYbbC8ffPDPwSOzeok4dTzE",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}