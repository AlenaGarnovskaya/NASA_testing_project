{
	"info": {
		"_postman_id": "fa498d82-462c-40bb-9fe4-ed30d313c703",
		"name": "NASA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32891858"
	},
	"item": [
		{
			"name": "DEMO",
			"item": [
				{
					"name": "Astronomy Picture of the Day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Response size is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Checking BODY\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.media_type).to.eql(\"image\");\r",
									"    pm.expect(jsonData.service_version).to.eql(\"v1\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.include(\"chunked\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Expose-Headers\")).to.include(\"X-RateLimit-Limit, X-RateLimit-Remaining\");\r",
									"});\r",
									"\r",
									"pm.test(\"Hdurl is a valid URL format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.hdurl).to.match(/^https?:\\/\\/.+\\..+/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"planetary",
								"apod"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Asteroids NeoWs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(130000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"Links object is present and contains 'self' attribute\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('links');\r",
									"    pm.expect(responseData.links).to.have.property('self');\r",
									"});\r",
									"pm.test(\"Estimated diameter values are non-negative numbers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    \r",
									"    const diameterKeys = ['kilometers', 'meters', 'miles', 'feet'];\r",
									"    diameterKeys.forEach(function(key) {\r",
									"        pm.expect(responseData.estimated_diameter[key].estimated_diameter_min).to.be.at.least(0);\r",
									"        pm.expect(responseData.estimated_diameter[key].estimated_diameter_max).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Checking BODY\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links.self).to.eql(\"http://api.nasa.gov/neo/rest/v1/neo/3542519?api_key=DEMO_KEY\");\r",
									"    pm.expect(jsonData.id).to.eql(\"3542519\");\r",
									"    pm.expect(jsonData.name).to.eql(\"(2010 PK9)\");\r",
									"    pm.expect(jsonData.designation).to.eql(\"2010 PK9\");\r",
									"    pm.expect(jsonData.nasa_jpl_url).to.eql(\"https://ssd.jpl.nasa.gov/tools/sbdb_lookup.html#/?sstr=3542519\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.include(\"chunked\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Headers\")).to.include(\"Origin, X-Requested-With, Content-Type, Accept\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.include(\"GET\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Max-Age\")).to.include(\"3600\");\r",
									"});\r",
									"\r",
									"pm.test(\"Close approach data array is present and contains at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.close_approach_data).to.exist.and.to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Orbit determination date is in valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.orbital_data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Orbit class object is present and contains all required attributes\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.orbital_data.orbit_class).to.exist;\r",
									"    pm.expect(responseData.orbital_data.orbit_class).to.have.property('orbit_class_type');\r",
									"    pm.expect(responseData.orbital_data.orbit_class).to.have.property('orbit_class_description');\r",
									"    pm.expect(responseData.orbital_data.orbit_class).to.have.property('orbit_class_range');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/neo/rest/v1/neo/3542519?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"neo",
								"rest",
								"v1",
								"neo",
								"3542519"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Earth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/png\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/planetary/earth/imagery?lon=100.75&lat=1.5&date=2014-02-01&api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"planetary",
								"earth",
								"imagery"
							],
							"query": [
								{
									"key": "lon",
									"value": "100.75"
								},
								{
									"key": "lat",
									"value": "1.5"
								},
								{
									"key": "date",
									"value": "2014-02-01"
								},
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Earth2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/planetary/earth/assets?lon=-95.33&lat=29.78&date=2018-01-01&&dim=0.10&api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"planetary",
								"earth",
								"assets"
							],
							"query": [
								{
									"key": "lon",
									"value": "-95.33"
								},
								{
									"key": "lat",
									"value": "29.78"
								},
								{
									"key": "date",
									"value": "2018-01-01"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "dim",
									"value": "0.10"
								},
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EPIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is image/png\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response body is a valid PNG image\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/png\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Api key parameter is included in the request URL\", function () {\r",
									"    pm.expect(pm.request.url.query.get(\"api_key\")).to.exist;\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/png\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/EPIC/archive/natural/2019/05/30/png/epic_1b_20190530011359.png?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"EPIC",
								"archive",
								"natural",
								"2019",
								"05",
								"30",
								"png",
								"epic_1b_20190530011359.png"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EPIC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking status, time, size\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header set to application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Date field is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.date).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Date is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the response contains an array of objects with 'date' field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.date).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/EPIC/api/natural/all?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"EPIC",
								"api",
								"natural",
								"all"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EPIC3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking status, time, size\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correcr\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Centroid coordinates should have valid latitude and longitude format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.centroid_coordinates).to.exist.and.to.be.an('object');\r",
									"        pm.expect(item.centroid_coordinates.lat).to.be.a('number');\r",
									"        pm.expect(item.centroid_coordinates.lon).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Attitude_quaternions object contains keys q0, q1, q2, q3\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.attitude_quaternions).to.be.an('object').and.to.include.all.keys('q0', 'q1', 'q2', 'q3');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Date field exists in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.date).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Version field must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.version).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/EPIC/api/natural/images?api_key=DEMO_KEY",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"EPIC",
								"api",
								"natural",
								"images"
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mars Weather Service API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking status, time, size\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Response size is less than 130000ms\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(130000);\r",
									"});\r",
									"\r",
									"// Additional testing\r",
									"pm.test(\"Response should be OK to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Response header test\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body includes 'sol_keys' and 'validity_checks' fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('sol_keys', 'validity_checks');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/insight_weather/?api_key=DEMO_KEY&feedtype=json&ver=1.0",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"insight_weather",
								""
							],
							"query": [
								{
									"key": "api_key",
									"value": "DEMO_KEY"
								},
								{
									"key": "feedtype",
									"value": "json"
								},
								{
									"key": "ver",
									"value": "1.0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}