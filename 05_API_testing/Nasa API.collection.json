{
	"info": {
		"_postman_id": "ee714f2b-d7cb-402b-96d9-b51cad7ecca4",
		"name": "NASA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32933148"
	},
	"item": [
		{
			"name": "Exoplanet/All planetary candidates smaller than 2Re with equilibrium temperatures between 180-303K",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response size is less than 500B\", function () {",
							"  pm.expect(pm.response.responseSize).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response content type is text/plain\", function () {",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body contains the expected error message format\", function () {",
							"    const responseData = pm.response.text();",
							"",
							"    pm.expect(responseData).to.include(\"Error Type\");",
							"    pm.expect(responseData).to.include(\"Message\");",
							"    pm.expect(responseData).to.include(\"UserError\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://exoplanetarchive.ipac.caltech.edu/cgi-bin/nstedAPI/nph-nstedAPI?&table=exoplanets&format=ipac&where=pl_kepflag=1",
					"protocol": "https",
					"host": [
						"exoplanetarchive",
						"ipac",
						"caltech",
						"edu"
					],
					"path": [
						"cgi-bin",
						"nstedAPI",
						"nph-nstedAPI"
					],
					"query": [
						{
							"key": null,
							"value": null
						},
						{
							"key": "table",
							"value": "exoplanets"
						},
						{
							"key": "format",
							"value": "ipac"
						},
						{
							"key": "where",
							"value": "pl_kepflag=1"
						}
					]
				}
			},
			"response": [
				{
					"name": "Exoplanet/All planetary candidates smaller than 2Re with equilibrium temperatures between 180-303K",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://exoplanetarchive.ipac.caltech.edu/cgi-bin/nstedAPI/nph-nstedAPI?&table=exoplanets&format=ipac&where=pl_kepflag=1",
							"protocol": "https",
							"host": [
								"exoplanetarchive",
								"ipac",
								"caltech",
								"edu"
							],
							"path": [
								"cgi-bin",
								"nstedAPI",
								"nph-nstedAPI"
							],
							"query": [
								{
									"key": null,
									"value": null
								},
								{
									"key": "table",
									"value": "exoplanets"
								},
								{
									"key": "format",
									"value": "ipac"
								},
								{
									"key": "where",
									"value": "pl_kepflag=1"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": "ERROR<br>\nError Type: UserError - \"table\" parameter<br>\nMessage:    \"exoplanets\" is not a valid table.\n"
				}
			]
		},
		{
			"name": "Open Science Data Repository Public API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 700ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(700);",
							"});",
							"",
							"pm.test(\"Response size is less than 13000B\", function () {",
							"  pm.expect(pm.response.responseSize).to.be.below(13000);",
							"});",
							"",
							"pm.test(\"Study files array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.studies[\"OSD-87\"].study_files).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"11921\");",
							"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"Werkzeug/2.0.3 Python/3.9.18\");",
							"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age=31536000; includeSubdomains\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"osdr.nasa.gov\");",
							"    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.include(\"SAMEORIGIN\");",
							"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.include(\"nosniff\");",
							"    pm.expect(pm.response.headers.get(\"Vary\")).to.include(\"Accept-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).to.include(\"1; mode=block\");",
							"});",
							"",
							"",
							"pm.test(\"File size is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.studies[\"OSD-87\"].study_files).to.be.an('array');",
							"    responseData.studies[\"OSD-87\"].study_files.forEach(function(file) {",
							"        pm.expect(file.file_size).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Study files array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.studies).to.have.property('OSD-87');",
							"  pm.expect(responseData.studies['OSD-87'].study_files).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"File size is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.studies[\"OSD-87\"].study_files).to.be.an('array');",
							"    responseData.studies[\"OSD-87\"].study_files.forEach(function(file) {",
							"        pm.expect(file.file_size).to.be.a('number').and.to.satisfy((size) => size >= 0, \"File size should be a non-negative integer\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://osdr.nasa.gov/osdr/data/osd/files/87",
					"protocol": "https",
					"host": [
						"osdr",
						"nasa",
						"gov"
					],
					"path": [
						"osdr",
						"data",
						"osd",
						"files",
						"87"
					]
				}
			},
			"response": []
		},
		{
			"name": "InSight: Mars Weather Service API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response size is less than 3000B\", function () {",
							"  pm.expect(pm.response.responseSize).to.be.below(3000);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json;charset=UTF-8\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.include(\"chunked\");",
							"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Headers\")).to.include(\"x-requested-with, Content-Type, origin, authorization, accept, client-security-token\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Methods\")).to.include(\"POST, GET, OPTIONS, DELETE, PUT\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Max-Age\")).to.include(\"1000\");",
							"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=60\");",
							"    pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.include(\"gzip\");",
							"    pm.expect(pm.response.headers.get(\"Content-Security-Policy\")).to.include(\"frame-ancestors 'self' https://*.nasa.gov https://nasa.gov;\");",
							"    pm.expect(pm.response.headers.get(\"Vary\")).to.include(\"Accept-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Vary\")).to.include(\"Accept-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"X-Amz-Cf-Pop\")).to.include(\"HIO52-P1\");",
							"    pm.expect(pm.response.headers.get(\"X-Cache\")).to.include(\"Hit from cloudfront\");",
							"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.include(\"nosniff\");",
							"    pm.expect(pm.response.headers.get(\"X-Ratelimit-Limit\")).to.include(\"40\");",
							"    pm.expect(pm.response.headers.get(\"X-Xss-Protection\")).to.include(\"1; mode=block\");",
							"});",
							"",
							"",
							"pm.test(\"Sol keys and validity checks are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('sol_keys');",
							"    pm.expect(responseData).to.have.property('validity_checks');",
							"});",
							"",
							"",
							"",
							"pm.test(\"Sol_keys array should be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.sol_keys).to.be.an('array').that.is.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/insight_weather/?api_key=DEMO_KEY&feedtype=json&ver=1.0",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"insight_weather",
						""
					],
					"query": [
						{
							"key": "api_key",
							"value": "DEMO_KEY"
						},
						{
							"key": "feedtype",
							"value": "json"
						},
						{
							"key": "ver",
							"value": "1.0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://exoplanetarchive.ipac.caltech.edu/cgi-bin/nstedAPI/nph-nstedAPI?&table=exoplanets&format=ipac&where=pl_kepflag=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response size is less than 500B\", function () {",
							"  pm.expect(pm.response.responseSize).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response content type is text/plain\", function () {",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body contains the expected error message format\", function () {",
							"    const responseData = pm.response.text();",
							"",
							"    pm.expect(responseData).to.include(\"Error Type\");",
							"    pm.expect(responseData).to.include(\"Message\");",
							"    pm.expect(responseData).to.include(\"UserError\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://exoplanetarchive.ipac.caltech.edu/cgi-bin/nstedAPI/nph-nstedAPI?&table=exoplanets&format=ipac&where=pl_kepflag=1",
					"protocol": "https",
					"host": [
						"exoplanetarchive",
						"ipac",
						"caltech",
						"edu"
					],
					"path": [
						"cgi-bin",
						"nstedAPI",
						"nph-nstedAPI"
					],
					"query": [
						{
							"key": null,
							"value": null
						},
						{
							"key": "table",
							"value": "exoplanets"
						},
						{
							"key": "format",
							"value": "ipac"
						},
						{
							"key": "where",
							"value": "pl_kepflag=1"
						}
					]
				}
			},
			"response": []
		}
	]
}